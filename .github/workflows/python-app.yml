name: Update solved.ac Stats

on:
  schedule:
    # 매일 오전 9시(KST)에 실행 (UTC 0시)
    - cron: '0 0 * * *'
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code with full history
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Fetch and pull latest changes
        run: |
          git fetch --all
          git pull origin main

      - name: Get solved.ac user info
        id: solvedac
        run: |
          # BOJ 사용자 이름 설정
          BOJ_USERNAME="rladydgnj"
          
          # solved.ac API에서 사용자 정보 가져오기
          USER_INFO=$(curl -s "https://solved.ac/api/v3/user/show?handle=${BOJ_USERNAME}")
          
          # 필요한 정보 추출
          TIER=$(echo $USER_INFO | jq -r '.tier')
          SOLVED_COUNT=$(echo $USER_INFO | jq -r '.solvedCount')
          RANK=$(echo $USER_INFO | jq -r '.rank')
          
          # 티어 이름 매핑
          if [ "$TIER" -eq "0" ]; then
            TIER_NAME="Unrated"
          elif [ "$TIER" -le "5" ]; then
            TIER_NAMES=("" "Bronze V" "Bronze IV" "Bronze III" "Bronze II" "Bronze I")
            TIER_NAME="${TIER_NAMES[$TIER]}"
          elif [ "$TIER" -le "10" ]; then
            TIER_NAMES=("" "Silver V" "Silver IV" "Silver III" "Silver II" "Silver I")
            TIER_NAME="${TIER_NAMES[$TIER-5]}"
          elif [ "$TIER" -le "15" ]; then
            TIER_NAMES=("" "Gold V" "Gold IV" "Gold III" "Gold II" "Gold I")
            TIER_NAME="${TIER_NAMES[$TIER-10]}"
          elif [ "$TIER" -le "20" ]; then
            TIER_NAMES=("" "Platinum V" "Platinum IV" "Platinum III" "Platinum II" "Platinum I")
            TIER_NAME="${TIER_NAMES[$TIER-15]}"
          elif [ "$TIER" -le "25" ]; then
            TIER_NAMES=("" "Diamond V" "Diamond IV" "Diamond III" "Diamond II" "Diamond I")
            TIER_NAME="${TIER_NAMES[$TIER-20]}"
          elif [ "$TIER" -le "30" ]; then
            TIER_NAMES=("" "Ruby V" "Ruby IV" "Ruby III" "Ruby II" "Ruby I")
            TIER_NAME="${TIER_NAMES[$TIER-25]}"
          elif [ "$TIER" -eq "31" ]; then
            TIER_NAME="Master"
          else
            TIER_NAME="Unknown"
          fi
          
          # 현재 날짜 가져오기
          DATE=$(date '+%Y-%m-%d %H:%M:%S')
          
          # 정보 저장
          echo "username=${BOJ_USERNAME}" >> $GITHUB_OUTPUT
          echo "tier_name=${TIER_NAME}" >> $GITHUB_OUTPUT
          echo "solved_count=${SOLVED_COUNT}" >> $GITHUB_OUTPUT
          echo "rank=${RANK}" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT

      - name: Update README using GitHub API
        run: |
          # solved.ac 통계 섹션 생성
          STATS_SECTION="## 📊 solved.ac 통계
          > 마지막 업데이트: ${{ steps.solvedac.outputs.date }}
      
          [![solved.ac 프로필](https://mazassumnida.wtf/api/v2/generate_badge?boj=rladydgnj)](https://solved.ac/profile/rladydgnj)
      
          ### 기본 정보
          - 티어: ${{ steps.solvedac.outputs.tier_name }}
          - 해결한 문제 수: ${{ steps.solvedac.outputs.solved_count }}개
          - 랭킹: ${{ steps.solvedac.outputs.rank }}위"
          
          # 현재 README 내용 가져오기
          README_CONTENT=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/Young4424/BaekJoonCodingTest/contents/README.md" \
            | jq -r .content | base64 --decode)
          
          # 기존 통계 섹션 업데이트 또는 추가
          if echo "$README_CONTENT" | grep -q "## 📊 solved.ac 통계"; then
            NEW_CONTENT=$(echo "$README_CONTENT" | perl -pe 's/## 📊 solved\.ac 통계.*?(?=\n##|\Z)/$STATS_SECTION/s')
          else
            NEW_CONTENT="${README_CONTENT}\n\n${STATS_SECTION}"
          fi
          
          # 현재 README 파일의 SHA 가져오기
          SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/Young4424/BaekJoonCodingTest/contents/README.md" \
            | jq -r .sha)
          
          # GitHub API를 통해 파일 업데이트
          curl -X PUT \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/Young4424/BaekJoonCodingTest/contents/README.md" \
            -d @- << EOF
          {
            "message": "Update solved.ac statistics",
            "content": "$(echo -n "$NEW_CONTENT" | base64 -w 0)",
            "sha": "$SHA"
          }
          EOF

      - name: Commit and push changes
        run: |
          # 변경사항이 있는지 확인
          git add README.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # 변경사항 커밋
          git commit -m "Update solved.ac statistics"
          
          # 변경사항 푸시 (여러 번 시도)
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push; then
              echo "Successfully pushed changes"
              exit 0
            else
              echo "Push failed, retrying..."
              git pull --rebase
              RETRY_COUNT=$((RETRY_COUNT+1))
            fi
          done
          
          echo "Failed to push changes after $MAX_RETRIES attempts"
          exit 1
